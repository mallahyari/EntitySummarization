/**
 * 
 */
package cs.uga.edu.dicgenerator;

import static cs.uga.edu.dicgenerator.VirtuosoAccess.GRAPH;
import static cs.uga.edu.dicgenerator.VirtuosoAccess.connectToVirtuoso;
import grph.algo.bfs.BFSResult;
import grph.algo.distance.DijkstraAlgorithm;
import grph.algo.distance.PageRank;
import grph.properties.IntProperty;
import grph.properties.LabelProperty;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;

import virtuoso.jena.driver.VirtGraph;
import virtuoso.jena.driver.VirtuosoQueryExecution;
import virtuoso.jena.driver.VirtuosoQueryExecutionFactory;
import cnrs.grph.set.HashIntSet;
import cnrs.grph.set.IntSet;

import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;



/**
 * @author Mehdi
 *
 */
public class TextProcessor {

	
	
	public static void main(String[] args) throws Exception {
//		DictionaryGenerator.loadCatNameListToMemory();
//		DictionaryGenerator.mapEntityLocalNamesToInt();
//		DictionaryGenerator.mapWordToInt();
//		DictionaryGenerator.mapAllUniqueEntityNamesToEntityIds();
//		PatternMatchingMachine.createPatternMatchingAutomata();
//		DictionaryGenerator.createYagoTaxanomyMap();
//		DictionaryGenerator.createWikipediaTaxanomyMapFromChildToParent();
//		DictionaryGenerator.createWikipediaTaxanomyMap_ID_FromChildToParent();
//		DictionaryGenerator.mapCategoryNamesToInt();
//		CategoryProcessor.computeCategorySubgraphWordCount();
//		CategoryProcessor.createIndexForWikipediaCategories();
//		Indexer indexer     = new Indexer(); 
//		IndexReader reader = DirectoryReader.open(indexer.getIndex());
//		IndexSearcher searcher = new IndexSearcher(reader);
//		String keyword = "Presidents_of_the_United_States";
//		CategoryProcessor.findCategoriesByKeyword(indexer, searcher, keyword);
//		CategoryProcessor.createCategoryInvertedIndex();
//		PatternMatchingMachine.recognizeEntites_Batch();
//		PatternMatchingMachine.recognizeEntites();
//		PatternMatchingMachine.createSemanticGraphFromEntities();
		PatternMatchingMachine.createSemanticGraphFromEntities_batch();
		
//		PatternMatchingMachine.createEntityFiles();    // step 1
//		PatternMatchingMachine.createConceptsReferingToEntityFromFile();
//		PatternMatchingMachine.createEntityrelatedConceptsFromFile();
//		PatternMatchingMachine.createEntityBidirectionalRelatedConceptsFromFile();  // step 2
		
//		PatternMatchingMachine.downloadWikipediaPagesForCorpusConcepts();   // step 3
//		PatternMatchingMachine.findEntityCategoriesFromFile();
//		CategoryProcessor.fillCategoryEntityTable();
//		DictionaryGenerator.persistWikipediaEntitiesIncomingLinks();
		
//		Map<String,Integer> catNamesToInt = DictionaryGenerator.loadCatNameListToMemory().getNameToInt();
//		String cat1 = "Baseball";
//		int catId1 = catNamesToInt.get(cat1);
//		System.out.println("cat: " + cat1);
//		Map<Integer, Set<Integer>> wikiTaxonomyMapFromParentToChild = DictionaryGenerator.loadWikiTaxonomyMapFromParentToChildToMemory();
////		Map<Integer, Set<Integer>> wikiTaxonomyMapFromChildToParent = DictionaryGenerator.loadWikiTaxonomyMap_ID_FromChildToParentToMemory();
//		Scanner sr = new Scanner(System.in); 
//		do {
////			Set<Integer> parentGraph = CategoryProcessor.categoryTreeFromChildToParent(wikiTaxonomyMapFromChildToParent, catId1);
//			Set<Integer> userCategory = CategoryProcessor.categoryTree(wikiTaxonomyMapFromParentToChild, catId1);
//		}while(!sr.nextLine().equalsIgnoreCase("q"));
		
		
//		File f = new File("/home/mehdi/rss/reuters/sports/");
//		SentenceDetector sd = null;
//		try {
//			sd = new SentenceDetector();
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (UnsupportedEncodingException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
//		String s = "mehdi,ali,hasan";
//		Set<String> ss = new HashSet<String>();
//		String [] a = s.split(",");
//		ss.addAll(Arrays.asList(a));
//		System.out.println(ss);
//		ss.add("sssd");
//		System.out.println(ss);
		
//		String c = "tech's ()busi) )'s sport98_* !bask, base!--, !foot(, <f00t>tech";
//		String c = "!bask,!foot";
//		c= c.replace("'s", "").replaceAll("[^\\dA-Za-z ]", "").replaceAll("\\s+", " ").replaceAll("[0-9]", "");
//		c= c.replace("'s", "").replaceAll("[^\\dA-Za-z ]", "").replaceAll("\\s+", " ");
//		System.out.println("c: " + c);
	}
	
	/*********************************************************
	 * @param maxL
	 * @return
	 */
	public static int findMax(List<Integer> vals) {
		int max = vals.get(0);
		for (int n : vals) {
			if (n > max) {
				max = n;
			} // end of if
		} // end of for
		return max;
	} // end of findMax

	public static int findMin(List<Integer> vals) {
		int min = vals.get(0);
		for (int n : vals) {
			if (n < min) {
				min = n;
			} // end of if
		} // end of for
		return min;
	} // end of findMin
	
	public static Map<Integer, Double> textRank() {
		String fileName = "document.txt";
		String document = PatternMatchingMachine.readDocument(fileName);
		Set<String> stopWords = PatternMatchingMachine.readStopWords();
//		String[] docWords = document.split(" ");
		Map<String,Integer> wordToVertexMap = new HashMap<String,Integer>();
		SemanticGraph textGraph = new SemanticGraph();
		LabelProperty vlp = textGraph.getVertexLabelProperty();
		String prevWord = "";
		SentenceDetector sd = null;
		try {
			sd = new SentenceDetector();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		List<String> sentenceList = sd.getAllSentencesFromDocument(document);
		for (String sentc : sentenceList) {
			String[] docWords = sentc.split(" ");
			for (int wordCnt = 0; wordCnt < docWords.length; wordCnt++) {
				String currentWord = docWords[wordCnt].toLowerCase();
				currentWord = currentWord.replace("'s", "").replace("'S", "").replace("'t", "").replace("$", "").replace("'", "").replace(",", "").replace("?", "").replace("!", "").replace("\"", "").replace("--", "").replace("(", "").replace(")", "");
				currentWord = currentWord.replaceAll("[0-9]", "");
				if (stopWords.contains(currentWord) || currentWord.contains("[")) {
					continue;
				} // end of if
				if (currentWord.length() < 3) {
					continue;
				} // end of if
				int vid = -1;
				if (wordToVertexMap.get(currentWord) == null) {
					vid = textGraph.addVertex();
					vlp.setValue(vid, currentWord);
					wordToVertexMap.put(currentWord, vid);
				}else {
					vid = wordToVertexMap.get(currentWord);
				} // end of if
				if (!prevWord.equals("")) {
					int preVid = wordToVertexMap.get(prevWord);
					textGraph.addDirectedSimpleEdge(vid, preVid);
					textGraph.addDirectedSimpleEdge(preVid, vid);
				} // end of if
				prevWord = currentWord;
			} // end of for
		} // end of for
		System.out.println("Creating Text Graph...");
		try {
			FileWriter dotFile = new FileWriter("textGraph.dot");
			dotFile.write(textGraph.toDot());
			dotFile.close();
		} catch (IOException e) {
		}
		System.out.println("Text Graph Created successfully.");
		int [] vertices = textGraph.getVertices().toIntArray();
		Map<Integer,Double> prevScoreMap = new HashMap<Integer,Double>();
		Map<Integer,Double> curScoreMap = new HashMap<Integer,Double>();
		double convergenceThreshold = 0.0001;
		int numOfIteration = 100;
		boolean isConverged = true;
		for (int vid : vertices) {
			prevScoreMap.put(vid, 0.25);
		} // end of for
		for (int steps = 0;steps < numOfIteration; steps++) {
			for (int vid : vertices) {
				double score = runTextRank(textGraph, vid, 0.85, prevScoreMap);
				curScoreMap.put(vid, score);
			} // end of for
			for (int vid : vertices) {
				double curScore = curScoreMap.get(vid);
				double preScore = prevScoreMap.get(vid);
				double err = Math.abs(curScore - preScore);
				prevScoreMap.put(vid, curScore);
				if (err > convergenceThreshold) {
					isConverged =  false;
				} // end of if
			} // end of for
			if (isConverged) {
				break;
			} // end of if
			isConverged = true;
		} // end of for
		List<Integer> sortedVids = PatternMatchingMachine.sortBasedOnScore(curScoreMap);
		for (int vid : sortedVids) {
			String word = vlp.getValue(vid);
			double rw   = curScoreMap.get(vid);
			System.out.println("Word: " + word + "  rw: " + rw);
		} // end of for
		
		Map<Integer,Double> tfIdfMap = new HashMap<Integer,Double>();
		double numOfSentences = Double.valueOf(sentenceList.size());
		for (int vid : sortedVids) {
			String word = vlp.getValue(vid).toLowerCase();
			double rw   = curScoreMap.get(vid);
			int frequency = 0;
			for (String sentence : sentenceList) {
				sentence = sentence.toLowerCase();
				if (sentence.contains(word)) {
					frequency++;
				} // end of if
			} // end of for
			double tfidf = rw * Math.log(numOfSentences / frequency);
			tfIdfMap.put(vid, tfidf);
			frequency = 0;
		} // end of for
		sortedVids = PatternMatchingMachine.sortBasedOnScore(tfIdfMap);
		for (int vid : sortedVids) {
			String word = vlp.getValue(vid);
			double rw   = curScoreMap.get(vid);
			System.out.println("Word: " + word + "  rw: " + rw + "  tfIdf: " + tfIdfMap.get(vid));
		} // end of for
		return curScoreMap;
	} // textRank
	
	public static double runTextRank(SemanticGraph textGraph, int vid, double alpha, Map<Integer, Double> prevScoreMap) {
		double score = 0;
		int [] incomingVertices = textGraph.getInNeighbors(vid).toIntArray();
		if (incomingVertices.length == 0) {
			score += prevScoreMap.get(vid);
		}else {
			for (int v : incomingVertices) {
				int outgoingVertices = textGraph.getOutNeighbours(v).size();
				score +=  prevScoreMap.get(v) / outgoingVertices;
			} // end of for
		} // end of if
		score *= alpha;
		score += 1 - alpha;
		return score;
	} // end of runTextRank
	
	
	public static int test2(String categoryName) {
		String categoryUriPrefix = "http://dbpedia.org/resource/Category:";
		VirtGraph virtGraph = connectToVirtuoso();
		StringBuffer queryString = new StringBuffer();
		queryString.append("PREFIX  lsdis: <http://lsdis.cs.uga.edu/wiki#> ");
		queryString.append("SELECT ?cc FROM <" + GRAPH + "> WHERE { ");
		queryString.append(" ?s a <" + categoryUriPrefix + categoryName + "> . ");
		queryString.append("} limit 10");
		com.hp.hpl.jena.query.Query sparql = QueryFactory.create(queryString.toString());
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create(sparql, virtGraph);
		ResultSet results = vqe.execSelect();
//		ResultSetMem rm = (ResultSetMem) results;
		int counter = 0;
		while (results.hasNext()) {
			QuerySolution result = results.nextSolution();
			counter = Integer.valueOf(result.getResource("cc").toString());
		} // end of while
		vqe.close();
		return counter;
	} // end of findNumberOfCategoryEntities
	

	/*********************************************************
	 * 
	 */

	public static void test() {
		SemanticGraph g = new SemanticGraph(0,0);
		ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(false);
		g.getClass().getClassLoader().setDefaultAssertionStatus(false);
		long stTime = System.currentTimeMillis();
		Map<Integer,IntSet> ccVertexSets = new HashMap<Integer,IntSet>(10);
		Map<Integer,Integer> redirectGraphMap = new HashMap<Integer,Integer>(10);
		IntProperty ew = g.getEdgeWeightProperty();
//		WeightProperty ew = new WeightProperty(g);
		for (int i = 1;i <= 10;i++) {
			g.addVertex(i);
			IntSet set = new HashIntSet();
			set.add(i);
			ccVertexSets.put(i, set);
		}
		int u = 4;
		int v = 2;
		int en1 = g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		
		u = 4;
		v = 3;
		g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 1;
		v = 3;
//		int en2 = g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 3;
		v = 7;
		g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 2;
		v = 1;
		int en3 = g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 5;
		v = 6;
		g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 2;
		v = 3;
		int en4 = g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		u = 1;
		v = 4;
		int en5 = g.addDirectedSimpleEdge(u, v);
		createCC(ccVertexSets, redirectGraphMap, u, v);
		ew.setValue(en1, 10);
		int en6 = g.addDirectedSimpleEdge(2, 4);
		ew.setValue(en6, 20);
//		g = (SemanticGraph) g.toUndirectedGraph();
//		g.displayGraphvizPNG();
		g.displayImg();
		DijkstraAlgorithm shortestPathAlgorithm = new DijkstraAlgorithm();
//		System.out.println("path:"+g.getShortestPath(4, 1));
//		SearchResult allPaths = shortestPathAlgorithm.compute(g, 1);
//		System.out.println("ssss:"+allPaths.computePathTo(1).getLength());
		BFSResult bfs = g.bfs(2);
		System.out.println("s to 4:"+bfs.computePathTo(7).getLength());
		System.out.println("s to4:"+bfs.computePathTo(7));
		System.out.println("s6:"+bfs.computePathTo(6));
		System.out.println("s:"+ g.getOutNeighbours(4).size());
		
		System.out.println("s2:"+bfs.computePathTo(6).getLength());
		System.out.println("ssss:"+bfs.maxDistance);
		LabelProperty lp = g.getVertexLabelProperty();
		System.out.println("label: "+ lp.getValue(40));
//		BFSBasedKShortestPaths ks = new BFSBasedKShortestPaths();
//		List<Path> lp = ks.compute(g, 1, 3, 2);
//		try {
//		for (Path p : lp)
//			System.out.println("p:"+p.getVertexSequence());
//		}catch(Exception e) {
//			System.out.println(e.getMessage());
//		}
		
		

		
//		u = 4;
//		v = 1;
//		g.addDirectedSimpleEdge(u, v);
//		createCC(ccVertexSets, redirectGraphMap, u, v);
//		u = 4;
//		v = 7;
//		g.addDirectedSimpleEdge(u, v);
//		createCC(ccVertexSets, redirectGraphMap, u, v);
//		g.displayGraphvizPNG();
		int max = 0;
		int key = 0;
		for (Map.Entry<Integer, IntSet> entry : ccVertexSets.entrySet()) {
//		System.out.println(entry.getKey() + " => " + entry.getValue().toString());
//		List<Integer> ll = entry.getValue().toIntegerArrayList();
//		Collections.sort(ll, Collections.reverseOrder());
//		System.out.println("ll:"+ll);
			
			if (entry.getValue().size() > max) {
				max = entry.getValue().size();
				key = entry.getKey();
			}
		}
//		System.out.println("Total time: " + (System.currentTimeMillis() - stTime));
//		System.out.println(key + " => " + ccVertexSets.get(key).toString());
//		Map<Integer,SemanticGraph> allGraphs = new HashMap<Integer,SemanticGraph>(9);
//		Map<Integer,Integer> redirectGraphMap = new HashMap<Integer,Integer>(9);
//		SemanticGraph grph = new SemanticGraph();
//		for (int i = 1;i <= 10;i++) {
//			SemanticGraph g = new SemanticGraph(0,0);
//			g.addVertex(i);
//			allGraphs.put(i, g);
//		}
//		int u = 2;
//		int v = 4;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 5;
//		v = 7;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 1;
//		v = 3;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 8;
//		v = 9;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 1;
//		v = 2;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 5;
//		v = 6;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		u = 2;
//		v = 3;
//		addEdge(allGraphs, redirectGraphMap, u, v);
//		for (Map.Entry<Integer, SemanticGraph> entry : allGraphs.entrySet()) {
//			int gid = entry.getKey();
//			SemanticGraph g = entry.getValue();
////			g.displayGraphvizPNG();
//					
//		}
		/*
		grph.addVertex(1);
		grph.addVertex(2);
		grph.addVertex(3);
		grph.addVertex(4);
		grph.addVertex(5);
		grph.addVertex(6);
		grph.addVertex(7);
		grph.addVertex(8);
		grph.addVertex(9);
		
		
		/*
//		int ed = grph.addDirectedSimpleEdge(1021, 3021);
//		int ed2 = grph.addDirectedSimpleEdge(1021, 350);
//		int ed3 = grph.addDirectedSimpleEdge(1021, 87);
//		int ed4 = grph.addDirectedSimpleEdge(1021, 12);
//		int ed5 = grph.addDirectedSimpleEdge(350, 12);
//		int ed6 = grph.addDirectedSimpleEdge(30, 873);
//		int ed7 = grph.addDirectedSimpleEdge(873,87);
//		LabelProperty lp = new LabelProperty(grph, null);
//		lp.acceptValue("mehdi");
//		lp.setValue(30, "test");
//		System.out.println(lp.getValue(30));
		LabelProperty vLp = grph.getVertexLabelProperty();
		vLp.setValue(30, "presidential candidate");
		System.out.println(vLp.getValue(30));
//		LabelProperty eLp = grph.getEdgeLabelProperty();
//		eLp.setValue(ed, "edgeL");
		Set<IntSet> ls =   (Set<IntSet>) grph.getConnectedComponents();
		System.out.println(ls + " "+ls.size());
		IntSet bigestCC = null;
		List<Integer> ccsize = new ArrayList<Integer>();
		for (IntSet cc: ls) {
			ccsize.add(cc.size());
			System.out.println("Com: " + cc);
			bigestCC = cc;
			
		}
		System.out.println("ccsize:"+ccsize);
		Collections.sort(ccsize, Collections.reverseOrder());
		System.out.println("ccsize:"+ccsize);
		bigestCC = grph.getLargestConnectedComponent();
		System.out.println("biggest CC: "+ bigestCC);
		ls.remove(bigestCC);
		System.out.println("new ls:"+ls);
		SemanticGraph g2 = new SemanticGraph();
		g2 = (SemanticGraph) grph.getSubgraphInducedByVertices(bigestCC);
		LabelProperty lp = g2.getVertexLabelProperty();
		int [] ii = bigestCC.toIntArray();
		for (int j=0;j<ii.length;j++) {
			lp.setValue(ii[j], "dddd");
		}
		System.out.println(g2.getVertexLabelProperty().getValue(30));
		System.out.println(grph.getVertexLabelProperty().getValue(30));
		
//		lp.setValue(30, grph.getVertexLabelProperty().getValue(30));
//		SemanticGraph g3 = new SemanticGraph();
//		System.out.println(g3.isNull());
//		g2.addVertices(bigestCC);
		g2.display();
//		System.out.println(bigestCC);
//		System.out.println(grph.toDot());
//		grph.display();
//		grph.displayImg();
		/*
		GraphvizImageWriter imgw = new GraphvizImageWriter();
		try {
			FileOutputStream fo = new FileOutputStream("img.pdf");
			imgw.writeGraph(grph, fo);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
//		imgw.writeGraph(grph, GraphvizImageWriter.COMMAND.dot, GraphvizImageWriter.OUTPUT_FORMAT.pdf, false);
		grph.displayGraphviz();
		*/
	}

	/*********************************************************
	 * @param ccVertexSets
	 * @param redirectGraphMap
	 * @param u
	 * @param v
	 */
	public static void createCC(Map<Integer, IntSet> ccVertexSets, Map<Integer, Integer> redirectGraphMap, int u, int v) {
		if (ccVertexSets.get(u) == null) {
			while(redirectGraphMap.get(u) != null) {
				u = redirectGraphMap.get(u);
			} // end of while
		}
		if (ccVertexSets.get(u) != ccVertexSets.get(v)) {
			if (ccVertexSets.get(v) != null) {
				ccVertexSets.get(u).addAll(ccVertexSets.get(v));
				ccVertexSets.remove(v);
				redirectGraphMap.put(v, u);
			}else {
				while(redirectGraphMap.get(v) != null) {
					v = redirectGraphMap.get(v);
				} // end of while
				if (u != v) {
					ccVertexSets.get(u).addAll(ccVertexSets.get(v));
					ccVertexSets.remove(v);
					redirectGraphMap.put(v, u);
				} // end of if
			} // end of if
		} // end of if
	}

	/*********************************************************
	 * @param allGraphs
	 * @param u
	 * @param v
	 */
	public static void addEdge(Map<Integer, SemanticGraph> allGraphs, Map<Integer, Integer> redirectGraphMap, int u, int v) {
		if (redirectGraphMap.get(u) == null) {
			if (redirectGraphMap.get(v) == null) {
				allGraphs.get(u).addGraph(allGraphs.get(v));
//				allGraphs.get(v).display();
//				allGraphs.get(u).display();
//				allGraphs.get(u).addDirectedSimpleEdge(u, v);
				allGraphs.get(u).addUndirectedSimpleEdge(u, v);
//				allGraphs.get(u).display();
				allGraphs.remove(v);
				redirectGraphMap.put(v, u);
			}else {
				int copyOfV = v;
				while(redirectGraphMap.get(copyOfV) != null) {
					copyOfV = redirectGraphMap.get(copyOfV);
				} // end of while
				allGraphs.get(u).addGraph(allGraphs.get(copyOfV));
//				allGraphs.get(u).addDirectedSimpleEdge(u, v);
				allGraphs.get(u).addUndirectedSimpleEdge(u, v);
				allGraphs.remove(copyOfV);
				redirectGraphMap.put(copyOfV, u);
			} // end of if
		} else {
			int copyOfU = u;
			while(redirectGraphMap.get(copyOfU) != null) {
				copyOfU = redirectGraphMap.get(copyOfU);
			} // end of while
			if (redirectGraphMap.get(v) == null) {
				allGraphs.get(copyOfU).addGraph(allGraphs.get(v));
//				allGraphs.get(copyOfU).addDirectedSimpleEdge(u, v);
				allGraphs.get(copyOfU).addUndirectedSimpleEdge(u, v);
				allGraphs.remove(v);
				redirectGraphMap.put(v, copyOfU);
			}else {
				int copyOfV = v;
				while(redirectGraphMap.get(copyOfV) != null) {
					copyOfV = redirectGraphMap.get(copyOfV);
				} // end of while
				if (copyOfU != copyOfV) {
					allGraphs.get(copyOfU).addGraph(allGraphs.get(copyOfV));
//					allGraphs.get(copyOfU).addDirectedSimpleEdge(u, v);
					allGraphs.get(copyOfU).addUndirectedSimpleEdge(u, v);
					allGraphs.remove(copyOfV);
					redirectGraphMap.put(copyOfV, copyOfU);
				}else {
//					allGraphs.get(copyOfU).addDirectedSimpleEdge(u, v);
					allGraphs.get(copyOfU).addUndirectedSimpleEdge(u, v);
				} // end of if
			} // end of if
		} // end of if
		
		// end of if
	} // end

} // end of TextProcessor
